#include <windows.h>

__declspec(naked) void __cdecl TApplication_ActivateHint()
{
	#define THintInfo                0x00565AE0
	#define X0057254A                0x0057254A
	#define X00572551                0x00572551
	#define TWinControl_Object_Entry 0x0057CAE0
	#define X00644318                0x00644318
	#define X0064D0B0                0x0064D0B0

	static const DWORD X005680E8 = 0x005680E8;
	static const DWORD X0056EDB4 = 0x0056EDB4;
	static const DWORD X0056FA00 = 0x0056FA00;
	static const DWORD X0056FA38 = 0x0056FA38;
	static const DWORD X0056FB4C = 0x0056FB4C;
	static const DWORD X00571D48 = 0x00571D48;
	static const DWORD X00571F40 = 0x00571F40;
	static const DWORD X00571F78 = 0x00571F78;
	static const DWORD X005720CC = 0x005720CC;
	static const DWORD X0057212C = 0x0057212C;
	static const DWORD X0057DDA8 = 0x0057DDA8;
	static const DWORD X0057F520 = 0x0057F520;
	static const DWORD X0058063C = 0x0058063C;
	static const DWORD X005807B4 = 0x005807B4;
	static const DWORD X005807E0 = 0x005807E0;
	static const DWORD X00580E3C = 0x00580E3C;
	static const DWORD X00581E68 = 0x00581E68;
	static const DWORD X005D1700 = 0x005D1700;
	static const DWORD X005D1770 = 0x005D1770;
	static const DWORD X005D20E4 = 0x005D20E4;
	static const DWORD X005D2158 = 0x005D2158;
	static const DWORD X005D2AC8 = 0x005D2AC8;
	static const DWORD X005D2B98 = 0x005D2B98;

	__asm
	{
		push    ebp                                     // 005721C4 _ 55
		mov     ebp, esp                                // 005721C5 _ 8B. EC
		add     esp, -144                               // 005721C7 _ 81. C4, FFFFFF70
		push    ebx                                     // 005721CD _ 53
		push    esi                                     // 005721CE _ 56
		push    edi                                     // 005721CF _ 57
		xor     ecx, ecx                                // 005721D0 _ 33. C9
		mov     dword ptr [ebp - 8CH], ecx              // 005721D2 _ 89. 8D, FFFFFF74
		mov     dword ptr [ebp - 90H], ecx              // 005721D8 _ 89. 8D, FFFFFF70
		mov     esi, edx                                // 005721DE _ 8B. F2
		lea     edi, [ebp - 0CH]                        // 005721E0 _ 8D. 7D, F4
		movsd                                           // 005721E3 _ A5
		movsd                                           // 005721E4 _ A5
		mov     dword ptr [ebp - 4H], eax               // 005721E5 _ 89. 45, FC
		lea     eax, [ebp - 60H]                        // 005721E8 _ 8D. 45, A0
		mov     edx, ds:[THintInfo]                     // 005721EB _ 8B. 15, 00565AE0(d)
		call    X005D2AC8                               // 005721F1 _ E8, 000608D2
		lea     ebx, [ebp - 4H]                         // 005721F6 _ 8D. 5D, FC
		xor     eax, eax                                // 005721F9 _ 33. C0
		push    ebp                                     // 005721FB _ 55
		push    X0057254A                               // 005721FC _ 68, 0057254A(d)
		push    dword ptr fs:[eax]                      // 00572201 _ 64: FF. 30
		mov     dword ptr fs:[eax], esp                 // 00572204 _ 64: 89. 20
		mov     eax, dword ptr [ebx]                    // 00572207 _ 8B. 03
		mov     byte ptr [eax + 58H], 0                 // 00572209 _ C6. 40, 58, 00
		mov     eax, dword ptr [ebx]                    // 0057220D _ 8B. 03
		cmp     byte ptr [eax + 88H], 0                 // 0057220F _ 80. B8, 00000088, 00
		je      L9                                      // 00572216 _ 0F 84, 000002E7
		mov     eax, dword ptr [ebx]                    // 0057221C _ 8B. 03
		cmp     dword ptr [eax + 60H], 0                // 0057221E _ 83. 78, 60, 00
		je      L9                                      // 00572222 _ 0F 84, 000002DB
		call    X005680E8                               // 00572228 _ E8, FFFF5EBB
		test    al, al                                  // 0057222D _ 84. C0
		jz      L9                                      // 0057222F _ 0F 84, 000002CE
		lea     eax, [ebp - 0CH]                        // 00572235 _ 8D. 45, F4
		mov     dl, 1                                   // 00572238 _ B2, 01
		call    X0057F520                               // 0057223A _ E8, 0000D2E1
		call    X0056FA38                               // 0057223F _ E8, FFFFD7F4
		mov     edx, dword ptr [ebx]                    // 00572244 _ 8B. 13
		cmp     eax, dword ptr [edx + 60H]              // 00572246 _ 3B. 42, 60
		jne     L9                                      // 00572249 _ 0F 85, 000002B4
		mov     eax, dword ptr [ebx]                    // 0057224F _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 00572251 _ 8B. 40, 60
		mov     dword ptr [ebp - 60H], eax              // 00572254 _ 89. 45, A0
		mov     eax, dword ptr [ebp - 0CH]              // 00572257 _ 8B. 45, F4
		mov     dword ptr [ebp - 58H], eax              // 0057225A _ 89. 45, A8
		mov     eax, dword ptr [ebp - 8H]               // 0057225D _ 8B. 45, F8
		mov     dword ptr [ebp - 54H], eax              // 00572260 _ 89. 45, AC
		call    X00571F78                               // 00572263 _ E8, FFFFFD10
		add     dword ptr [ebp - 54H], eax              // 00572268 _ 01. 45, AC
		mov     eax, ds:[X0064D0B0]                     // 0057226B _ A1, 0064D0B0(d)
		call    X0056EDB4                               // 00572270 _ E8, FFFFCB3F
		mov     dword ptr [ebp - 50H], eax              // 00572275 _ 89. 45, B0
		mov     eax, dword ptr [ebx]                    // 00572278 _ 8B. 03
		mov     eax, dword ptr [eax + 5CH]              // 0057227A _ 8B. 40, 5C
		mov     dword ptr [ebp - 4CH], eax              // 0057227D _ 89. 45, B4
		lea     edx, [ebp - 80H]                        // 00572280 _ 8D. 55, 80
		mov     eax, dword ptr [ebx]                    // 00572283 _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 00572285 _ 8B. 40, 60
		call    X0058063C                               // 00572288 _ E8, 0000E3AF
		lea     esi, [ebp - 80H]                        // 0057228D _ 8D. 75, 80
		lea     edi, [ebp - 48H]                        // 00572290 _ 8D. 7D, B8
		movsd                                           // 00572293 _ A5
		movsd                                           // 00572294 _ A5
		movsd                                           // 00572295 _ A5
		movsd                                           // 00572296 _ A5
		lea     edx, [ebp - 14H]                        // 00572297 _ 8D. 55, EC
		mov     eax, dword ptr [ebx]                    // 0057229A _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 0057229C _ 8B. 40, 60
		mov     ecx, dword ptr [eax]                    // 0057229F _ 8B. 08
		call    dword ptr [ecx + 40H]                   // 005722A1 _ FF. 51, 40
		xor     eax, eax                                // 005722A4 _ 33. C0
		mov     dword ptr [ebp - 1CH], eax              // 005722A6 _ 89. 45, E4
		xor     eax, eax                                // 005722A9 _ 33. C0
		mov     dword ptr [ebp - 18H], eax              // 005722AB _ 89. 45, E8
		mov     eax, dword ptr [ebx]                    // 005722AE _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 005722B0 _ 8B. 40, 60
		mov     esi, dword ptr [eax + 30H]              // 005722B3 _ 8B. 70, 30
		test    esi, esi                                // 005722B6 _ 85. F6
		jz      L1                                      // 005722B8 _ 74, 0C
		lea     edx, [ebp - 1CH]                        // 005722BA _ 8D. 55, E4
		mov     eax, esi                                // 005722BD _ 8B. C6
		mov     ecx, dword ptr [eax]                    // 005722BF _ 8B. 08
		call    dword ptr [ecx + 40H]                   // 005722C1 _ FF. 51, 40
		jmp     L2                                      // 005722C4 _ EB, 2F

	L1:
		mov     eax, dword ptr [ebx]                    // 005722C6 _ 8B. 03
		mov     esi, dword ptr [eax + 60H]              // 005722C8 _ 8B. 70, 60
		mov     eax, esi                                // 005722CB _ 8B. C6
		mov     edx, ds:[TWinControl_Object_Entry]      // 005722CD _ 8B. 15, 0057CAE0(d)
		call    X005D1700                               // 005722D3 _ E8, 0005F428
		test    al, al                                  // 005722D8 _ 84. C0
		jz      L2                                      // 005722DA _ 74, 19
		cmp     dword ptr [esi + 190H], 0               // 005722DC _ 83. BE, 00000190, 00
		je      L2                                      // 005722E3 _ 74, 10
		lea     eax, [ebp - 1CH]                        // 005722E5 _ 8D. 45, E4
		push    eax                                     // 005722E8 _ 50
		mov     eax, dword ptr [esi + 190H]             // 005722E9 _ 8B. 86, 00000190
		push    eax                                     // 005722EF _ 50
		call    ClientToScreen                          // 005722F0 _ E8, 0008EEFF
	L2:
		mov     eax, dword ptr [ebp - 18H]              // 005722F5 _ 8B. 45, E8
		sub     eax, dword ptr [ebp - 10H]              // 005722F8 _ 2B. 45, F0
		push    eax                                     // 005722FB _ 50
		mov     eax, dword ptr [ebp - 1CH]              // 005722FC _ 8B. 45, E4
		sub     eax, dword ptr [ebp - 14H]              // 005722FF _ 2B. 45, EC
		push    eax                                     // 00572302 _ 50
		lea     eax, [ebp - 48H]                        // 00572303 _ 8D. 45, B8
		push    eax                                     // 00572306 _ 50
		call    OffsetRect                              // 00572307 _ E8, 0008F18E
		lea     ecx, [ebp - 88H]                        // 0057230C _ 8D. 8D, FFFFFF78
		lea     edx, [ebp - 0CH]                        // 00572312 _ 8D. 55, F4
		mov     eax, dword ptr [ebx]                    // 00572315 _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 00572317 _ 8B. 40, 60
		call    X005807E0                               // 0057231A _ E8, 0000E4C1
		mov     eax, dword ptr [ebp - 88H]              // 0057231F _ 8B. 85, FFFFFF78
		mov     dword ptr [ebp - 38H], eax              // 00572325 _ 89. 45, C8
		mov     eax, dword ptr [ebp - 84H]              // 00572328 _ 8B. 85, FFFFFF7C
		mov     dword ptr [ebp - 34H], eax              // 0057232E _ 89. 45, CC
		lea     edx, [ebp - 90H]                        // 00572331 _ 8D. 95, FFFFFF70
		mov     eax, dword ptr [ebx]                    // 00572337 _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 00572339 _ 8B. 40, 60
		call    X0056FA00                               // 0057233C _ E8, FFFFD6BF
		mov     eax, dword ptr [ebp - 90H]              // 00572341 _ 8B. 85, FFFFFF70
		lea     edx, [ebp - 8CH]                        // 00572347 _ 8D. 95, FFFFFF74
		call    X0057DDA8                               // 0057234D _ E8, 0000BA56
		mov     edx, dword ptr [ebp - 8CH]              // 00572352 _ 8B. 95, FFFFFF74
		lea     eax, [ebp - 28H]                        // 00572358 _ 8D. 45, D8
		call    X005D2158                               // 0057235B _ E8, 0005FDF8
		xor     eax, eax                                // 00572360 _ 33. C0
		mov     dword ptr [ebp - 30H], eax              // 00572362 _ 89. 45, D0
		mov     eax, dword ptr [ebx]                    // 00572365 _ 8B. 03
		mov     eax, dword ptr [eax + 74H]              // 00572367 _ 8B. 40, 74
		mov     dword ptr [ebp - 2CH], eax              // 0057236A _ 89. 45, D4
		mov     eax, ds:[X00644318]                     // 0057236D _ A1, 00644318(d)
		mov     dword ptr [ebp - 5CH], eax              // 00572372 _ 89. 45, A4
		xor     eax, eax                                // 00572375 _ 33. C0
		mov     dword ptr [ebp - 24H], eax              // 00572377 _ 89. 45, DC
		lea     eax, [ebp - 60H]                        // 0057237A _ 8D. 45, A0
		push    eax                                     // 0057237D _ 50
		mov     eax, dword ptr [ebx]                    // 0057237E _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 00572380 _ 8B. 40, 60
		xor     ecx, ecx                                // 00572383 _ 33. C9
		mov     edx, 45104                              // 00572385 _ BA, 0000B030
		call    X00581E68                               // 0057238A _ E8, 0000FAD9
		test    eax, eax                                // 0057238F _ 85. C0
		sete    byte ptr [ebp - 1DH]                    // 00572391 _ 0F 94. 45, E3
		cmp     byte ptr [ebp - 1DH], 0                 // 00572395 _ 80. 7D, E3, 00
		je      L3                                      // 00572399 _ 74, 24
		mov     eax, dword ptr [ebx]                    // 0057239B _ 8B. 03
		cmp     word ptr [eax + 11AH], 0                // 0057239D _ 66: 83. B8, 0000011A, 00
		je      L3                                      // 005723A5 _ 74, 18
		lea     eax, [ebp - 60H]                        // 005723A7 _ 8D. 45, A0
		push    eax                                     // 005723AA _ 50
		lea     ecx, [ebp - 1DH]                        // 005723AB _ 8D. 4D, E3
		lea     edx, [ebp - 28H]                        // 005723AE _ 8D. 55, D8
		mov     esi, dword ptr [ebx]                    // 005723B1 _ 8B. 33
		mov     eax, dword ptr [esi + 11CH]             // 005723B3 _ 8B. 86, 0000011C
		call    dword ptr [esi + 118H]                  // 005723B9 _ FF. 96, 00000118
	L3:
		cmp     byte ptr [ebp - 1DH], 0                 // 005723BF _ 80. 7D, E3, 00
		je      L4                                      // 005723C3 _ 74, 08
		mov     eax, dword ptr [ebx]                    // 005723C5 _ 8B. 03
		cmp     dword ptr [eax + 60H], 0                // 005723C7 _ 83. 78, 60, 00
		jne     L5                                      // 005723CB _ 75, 04
	L4:
		xor     eax, eax                                // 005723CD _ 33. C0
		jmp     L6                                      // 005723CF _ EB, 02

	L5:
		mov     al, 1                                   // 005723D1 _ B0, 01
	L6:
		mov     edx, dword ptr [ebx]                    // 005723D3 _ 8B. 13
		mov     byte ptr [edx + 58H], al                // 005723D5 _ 88. 42, 58
		mov     eax, dword ptr [ebx]                    // 005723D8 _ 8B. 03
		cmp     byte ptr [eax + 58H], 0                 // 005723DA _ 80. 78, 58, 00
		je      L9                                      // 005723DE _ 0F 84, 0000011F
		cmp     dword ptr [ebp - 28H], 0                // 005723E4 _ 83. 7D, D8, 00
		je      L9                                      // 005723E8 _ 0F 84, 00000115
		push    ebp                                     // 005723EE _ 55
		mov     eax, dword ptr [ebp - 5CH]              // 005723EF _ 8B. 45, A4
		call    X005720CC                               // 005723F2 _ E8, FFFFFCD5
		pop     ecx                                     // 005723F7 _ 59
		mov     eax, dword ptr [ebx]                    // 005723F8 _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 005723FA _ 8B. 40, 60
		mov     dl, byte ptr [eax + 5FH]                // 005723FD _ 8A. 50, 5F
		mov     eax, dword ptr [ebx]                    // 00572400 _ 8B. 03
		mov     eax, dword ptr [eax + 84H]              // 00572402 _ 8B. 80, 00000084
		mov     ecx, dword ptr [eax]                    // 00572408 _ 8B. 08
		call    dword ptr [ecx + 70H]                   // 0057240A _ FF. 51, 70
		mov     eax, dword ptr [ebp - 24H]              // 0057240D _ 8B. 45, DC
		push    eax                                     // 00572410 _ 50
		lea     eax, [ebp - 70H]                        // 00572411 _ 8D. 45, 90
		push    eax                                     // 00572414 _ 50
		mov     eax, dword ptr [ebx]                    // 00572415 _ 8B. 03
		mov     eax, dword ptr [eax + 84H]              // 00572417 _ 8B. 80, 00000084
		mov     ecx, dword ptr [ebp - 28H]              // 0057241D _ 8B. 4D, D8
		mov     edx, dword ptr [ebp - 50H]              // 00572420 _ 8B. 55, B0
		mov     esi, dword ptr [eax]                    // 00572423 _ 8B. 30
		call    dword ptr [esi + 0D4H]                  // 00572425 _ FF. 96, 000000D4
		mov     eax, dword ptr [ebp - 54H]              // 0057242B _ 8B. 45, AC
		push    eax                                     // 0057242E _ 50
		mov     eax, dword ptr [ebp - 58H]              // 0057242F _ 8B. 45, A8
		push    eax                                     // 00572432 _ 50
		lea     eax, [ebp - 70H]                        // 00572433 _ 8D. 45, 90
		push    eax                                     // 00572436 _ 50
		call    OffsetRect                              // 00572437 _ E8, 0008F05E
		mov     eax, dword ptr [ebx]                    // 0057243C _ 8B. 03
		mov     eax, dword ptr [eax + 84H]              // 0057243E _ 8B. 80, 00000084
		mov     si, 65480                               // 00572444 _ 66: BE, FFC8
		call    X005D1770                               // 00572448 _ E8, 0005F323
		test    al, al                                  // 0057244D _ 84. C0
		jz      L7                                      // 0057244F _ 74, 13
		push    ebp                                     // 00572451 _ 55
		mov     eax, dword ptr [ebp - 28H]              // 00572452 _ 8B. 45, D8
		call    X0057212C                               // 00572455 _ E8, FFFFFCD2
		pop     ecx                                     // 0057245A _ 59
		add     eax, 5                                  // 0057245B _ 83. C0, 05
		sub     dword ptr [ebp - 70H], eax              // 0057245E _ 29. 45, 90
		sub     dword ptr [ebp - 68H], eax              // 00572461 _ 29. 45, 98
	L7:
		lea     ecx, [ebp - 88H]                        // 00572464 _ 8D. 8D, FFFFFF78
		lea     edx, [ebp - 48H]                        // 0057246A _ 8D. 55, B8
		mov     eax, dword ptr [ebx]                    // 0057246D _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 0057246F _ 8B. 40, 60
		call    X005807B4                               // 00572472 _ E8, 0000E33D
		mov     eax, dword ptr [ebx]                    // 00572477 _ 8B. 03
		mov     edx, dword ptr [ebp - 88H]              // 00572479 _ 8B. 95, FFFFFF78
		mov     dword ptr [eax + 64H], edx              // 0057247F _ 89. 50, 64
		mov     edx, dword ptr [ebp - 84H]              // 00572482 _ 8B. 95, FFFFFF7C
		mov     dword ptr [eax + 68H], edx              // 00572488 _ 89. 50, 68
		lea     ecx, [ebp - 88H]                        // 0057248B _ 8D. 8D, FFFFFF78
		lea     edx, [ebp - 40H]                        // 00572491 _ 8D. 55, C0
		mov     eax, dword ptr [ebx]                    // 00572494 _ 8B. 03
		mov     eax, dword ptr [eax + 60H]              // 00572496 _ 8B. 40, 60
		call    X005807B4                               // 00572499 _ E8, 0000E316
		mov     eax, dword ptr [ebx]                    // 0057249E _ 8B. 03
		mov     edx, dword ptr [ebp - 88H]              // 005724A0 _ 8B. 95, FFFFFF78
		mov     dword ptr [eax + 6CH], edx              // 005724A6 _ 89. 50, 6C
		mov     edx, dword ptr [ebp - 84H]              // 005724A9 _ 8B. 95, FFFFFF7C
		mov     dword ptr [eax + 70H], edx              // 005724AF _ 89. 50, 70
		mov     eax, dword ptr [ebx]                    // 005724B2 _ 8B. 03
		mov     eax, dword ptr [eax + 84H]              // 005724B4 _ 8B. 80, 00000084
		mov     edx, dword ptr [ebp - 4CH]              // 005724BA _ 8B. 55, B4
		call    X00580E3C                               // 005724BD _ E8, 0000E97A
		mov     eax, dword ptr [ebp - 24H]              // 005724C2 _ 8B. 45, DC
		push    eax                                     // 005724C5 _ 50
		mov     eax, dword ptr [ebx]                    // 005724C6 _ 8B. 03
		mov     eax, dword ptr [eax + 84H]              // 005724C8 _ 8B. 80, 00000084
		mov     ecx, dword ptr [ebp - 28H]              // 005724CE _ 8B. 4D, D8
		lea     edx, [ebp - 70H]                        // 005724D1 _ 8D. 55, 90
		mov     esi, dword ptr [eax]                    // 005724D4 _ 8B. 30
		call    dword ptr [esi + 0D0H]                  // 005724D6 _ FF. 96, 000000D0
		call    X0056FB4C                               // 005724DC _ E8, FFFFD66B
		mov     eax, dword ptr [ebp - 30H]              // 005724E1 _ 8B. 45, D0
		test    eax, eax                                // 005724E4 _ 85. C0
		jle     L8                                      // 005724E6 _ 7E, 0D
		xor     ecx, ecx                                // 005724E8 _ 33. C9
		mov     edx, eax                                // 005724EA _ 8B. D0
		mov     eax, dword ptr [ebx]                    // 005724EC _ 8B. 03
		call    X00571D48                               // 005724EE _ E8, FFFFF855
		jmp     L11                                     // 005724F3 _ EB, 29

	L8:
		mov     cl, 1                                   // 005724F5 _ B1, 01
		mov     edx, dword ptr [ebp - 2CH]              // 005724F7 _ 8B. 55, D4
		mov     eax, dword ptr [ebx]                    // 005724FA _ 8B. 03
		call    X00571D48                               // 005724FC _ E8, FFFFF847
		jmp     L11                                     // 00572501 _ EB, 1B

	L9:
		mov     eax, dword ptr [ebp - 30H]              // 00572503 _ 8B. 45, D0
		test    eax, eax                                // 00572506 _ 85. C0
		jle     L10                                     // 00572508 _ 7E, 0D
		xor     ecx, ecx                                // 0057250A _ 33. C9
		mov     edx, eax                                // 0057250C _ 8B. D0
		mov     eax, dword ptr [ebx]                    // 0057250E _ 8B. 03
		call    X00571D48                               // 00572510 _ E8, FFFFF833
		jmp     L11                                     // 00572515 _ EB, 07

	L10:
		mov     eax, dword ptr [ebx]                    // 00572517 _ 8B. 03
		call    X00571F40                               // 00572519 _ E8, FFFFFA22
	L11:
		xor     eax, eax                                // 0057251E _ 33. C0
		pop     edx                                     // 00572520 _ 5A
		pop     ecx                                     // 00572521 _ 59
		pop     ecx                                     // 00572522 _ 59
		mov     dword ptr fs:[eax], edx                 // 00572523 _ 64: 89. 10
		push    X00572551                               // 00572526 _ 68, 00572551(d)
		lea     eax, [ebp - 90H]                        // 0057252B _ 8D. 85, FFFFFF70
		mov     edx, 2                                  // 00572531 _ BA, 00000002
		call    X005D20E4                               // 00572536 _ E8, 0005FBA9
		lea     eax, [ebp - 60H]                        // 0057253B _ 8D. 45, A0
		mov     edx, ds:[THintInfo]                     // 0057253E _ 8B. 15, 00565AE0(d)
		call    X005D2B98                               // 00572544 _ E8, 0006064F
		ret                                             // 00572549 _ C3
	}
}
