--- old\regcomp.c	Sat Feb  1 20:52:50 2020
+++ new\regcomp.c	Sat Feb  1 20:52:50 2020
@@ -772,7 +772,7 @@
 #endif
 
   err = re_string_construct (&regexp, pattern, length, preg->translate,
-			     (syntax & RE_ICASE) != 0, dfa);
+			     (bool)((syntax & RE_ICASE) != 0), dfa);
   if (__glibc_unlikely (err != REG_NOERROR))
     {
     re_compile_internal_free_return:
@@ -828,7 +828,7 @@
 {
   __re_size_t table_size;
 #ifndef _LIBC
-  const char *codeset_name;
+  const char *codeset_name, *p;
 #endif
 #ifdef RE_ENABLE_I18N
   size_t max_i18n_object_size = MAX (sizeof (wchar_t), sizeof (wctype_t));
@@ -878,7 +878,7 @@
   if ((codeset_name[0] == 'U' || codeset_name[0] == 'u')
       && (codeset_name[1] == 'T' || codeset_name[1] == 't')
       && (codeset_name[2] == 'F' || codeset_name[2] == 'f')
-      && strcmp (codeset_name + 3 + (codeset_name[3] == '-'), "8") == 0)
+      && *(p = codeset_name + 3 + (codeset_name[3] == '-')) == '8' && p[1] == '\0')
     dfa->is_utf8 = 1;
 
   /* We check exhaustively in the loop below if this charset is a
@@ -2413,7 +2413,7 @@
       tree = build_charclass_op (dfa, regexp->trans,
 				 "alnum",
 				 "_",
-				 token->type == OP_NOTWORD, err);
+				 (bool)(token->type == OP_NOTWORD), err);
       if (__glibc_unlikely (*err != REG_NOERROR && tree == NULL))
 	return NULL;
       break;
@@ -2423,7 +2423,7 @@
       tree = build_charclass_op (dfa, regexp->trans,
 				 "space",
 				 "",
-				 token->type == OP_NOTSPACE, err);
+				 (bool)(token->type == OP_NOTSPACE), err);
       if (__glibc_unlikely (*err != REG_NOERROR && tree == NULL))
 	return NULL;
       break;
@@ -2701,7 +2701,7 @@
                  const bracket_elem_t *end_elem)
 # endif /* not RE_ENABLE_I18N */
 {
-  unsigned int start_ch, end_ch;
+  unsigned char start_ch, end_ch;
   /* Equivalence Classes and Character Classes can't be a range start/end.  */
   if (__glibc_unlikely (start_elem->type == EQUIV_CLASS
 			|| start_elem->type == CHAR_CLASS
@@ -3656,6 +3656,7 @@
   Idx alloc = 0;
 #endif /* not RE_ENABLE_I18N */
   reg_errcode_t ret;
+  re_token_t br_token = { 0 };
   bin_tree_t *tree;
 
   sbcset = (re_bitset_ptr_t) calloc (sizeof (bitset_t), 1);
@@ -3706,7 +3707,8 @@
 #endif
 
   /* Build a tree for simple bracket.  */
-  re_token_t br_token = { .type = SIMPLE_BRACKET, .opr.sbcset = sbcset };
+  br_token.opr.sbcset = sbcset;
+  br_token.type = SIMPLE_BRACKET;
   tree = create_token_tree (dfa, NULL, NULL, &br_token);
   if (__glibc_unlikely (tree == NULL))
     goto build_word_op_espace;
@@ -3797,7 +3799,7 @@
 create_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,
 	     re_token_type_t type)
 {
-  re_token_t t = { .type = type };
+  re_token_t t = { { '\0' }, /*.type = */type };
   return create_token_tree (dfa, left, right, &t);
 }
 
