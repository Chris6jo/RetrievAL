--- spal60sr\src\TSSGCtrl\SSBundleCalc.original.cpp	Sun Apr  6 21:43:32 2003
+++ spal60sr\src\TSSGCtrl\SSBundleCalc.cpp	Sun Apr  6 21:43:32 2003
@@ -1,5 +1,17 @@
 #include "SSBundleCalc.h"
 #include "BitOperation.h"
+
+#define MIN_MAX_SUPPORT 1
+
+#if MIN_MAX_SUPPORT
+#include "intrinsic.h"
+#endif
+
+#if LOCAL_MEMORY_SUPPORT
+unsigned long __stdcall TSSGCtrl_Read_with_CheckLocalMemory(TSSGCtrl *_this, TSSGSubject *SSGS, HANDLE ProcessHandle, DWORD *Address, vector<TProcessAccessElementBase*> &AEVec, const string &AddressStr);
+unsigned long __stdcall TSSGCtrl_Write_with_CheckLocalMemory(TSSGCtrl *_this, TSSGSubject *SSGS, HANDLE ProcessHandle, DWORD *Address, vector<TProcessAccessElementBase*> &AEVec, const string &AddressStr);
+#endif
+
 //---------------------------------------------------------------------
 //「初期設定関数」
 //
@@ -44,13 +56,41 @@
 		else						size=1;
 		isUnsigned = true;
 	}else{
+#if !MIN_MAX_SUPPORT
         if(max<=0xFF && min>=-0xFF)         size=1;
 		else if(max<=0xFFFF && min>=-0xFFFF)size=2;
 		else 							    size=4;
+#else
+		if (max <= SHRT_MAX && min >= SHRT_MIN &&
+			(tmpV[3].length() != 3 || (*(LPDWORD)tmpV[3].begin() != BSWAP32('min\0') && *(LPDWORD)tmpV[3].begin() != BSWAP32('max\0'))) &&
+			(tmpV[4].length() != 3 || (*(LPDWORD)tmpV[4].begin() != BSWAP32('max\0') && *(LPDWORD)tmpV[4].begin() != BSWAP32('min\0'))))
+		{
+			size = (max <= CHAR_MAX && min >= CHAR_MIN) ? 1 : 2;
+		}
+		else
+		{
+			size = 4;
+		}
+#endif
 		isUnsigned = false;
 	}
  }else isUnsigned = (tmpV[5]=="unsigned");
  
+#if MIN_MAX_SUPPORT
+ if (size > 4)
+	size = 4;
+ if (tmpV[3].length() == 3)
+	if (*(LPDWORD)tmpV[3].begin() == BSWAP32('min\0'))
+		min = isUnsigned ? 0 : (long)LONG_MIN >> ((4 - size) * 8);
+	else if (*(LPDWORD)tmpV[3].begin() == BSWAP32('max\0'))
+		min = (isUnsigned ? ULONG_MAX : LONG_MAX) >> ((4 - size) * 8);
+ if (tmpV[4].length() == 3)
+	if (*(LPDWORD)tmpV[4].begin() == BSWAP32('min\0'))
+		max = isUnsigned ? 0 : (long)LONG_MIN >> ((4 - size) * 8);
+	else if (*(LPDWORD)tmpV[4].begin() == BSWAP32('max\0'))
+		max = (isUnsigned ? ULONG_MAX : LONG_MAX) >> ((4 - size) * 8);
+#endif
+
  isBigEndian = (tmpV[6]=="big_e");
 
  
@@ -79,14 +119,26 @@
  Setting(SSGC);
  
  TSmartHandle SHandle;
+#if !LOCAL_MEMORY_SUPPORT
  if(( SHandle=SSGC.Open(this, PROCESS_VM_READ) )==NULL)
 	return ssgCtrl::reOPEN_ERROR;	//プロセスのオープンエラー
+#else
+ SHandle = SSGC.Open(this, PROCESS_VM_READ);
+#endif
 
+#if !SUBJECT_STATUS
  if(!SSGC.IsEnabled(this)) return ssgCtrl::reNOT_ENABLED;	//有効条件が偽
+#else
+ if(!SSGC.IsEnabled(this, TRUE)) return ssgCtrl::reNOT_ENABLED;	//有効条件が偽
+#endif
 
 
  //オフセット用のアドレスには、[replace]等の属性を付けない
+#if !SUBJECT_STATUS
  unsigned long Address = (isOffset)?SSGC.GetAddress(this, addressStr, 0):0;
+#else
+ unsigned long Address = (isOffset) ? (unsigned long)(address = (const BYTE *)SSGC.GetAddress(this, addressStr, 0)) : 0;
+#endif
 
  if(size==0)	//Setting()中ではファイルが開けなかった
 	return ssgCtrl::reOPTION_ERROR;	//リストファイルがない！
@@ -108,9 +160,16 @@
 	for(; VIt!=VEnd; VIt++){
 		if(VIt->empty()) continue;
 
+#if !LOCAL_MEMORY_SUPPORT
 		ThisAddress = Address+SSGC.GetAddress(this, SSGC.strD.Get(*VIt,",",0));
 
 		if(SSGC.Read(this, SHandle, &ThisAddress, AEVec)!=0) 
+#else
+		string addressStr(SSGC.strD.Get(*VIt, ",", 0));
+		ThisAddress = Address + SSGC.GetAddress(this, addressStr);
+
+		if (TSSGCtrl_Read_with_CheckLocalMemory(&SSGC, this, SHandle, &ThisAddress, AEVec, addressStr) != 0)
+#endif
 			return ssgCtrl::reACCESS_ERROR;	//エラーなら1を返す
 		memcpy(&Val, AE.GetData()->begin(), size );
 
@@ -143,14 +202,22 @@
  Setting(SSGC);
 
  TSmartHandle SHandle;
+#if !LOCAL_MEMORY_SUPPORT
  if(( SHandle=SSGC.Open(this, PROCESS_VM_READ|PROCESS_VM_WRITE|PROCESS_VM_OPERATION) )==NULL)
 	return ssgCtrl::reOPEN_ERROR;	//プロセスのオープンエラー
+#else
+ SHandle = SSGC.Open(this, PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_VM_OPERATION);
+#endif
 
  if(!SSGC.IsEnabled(this)) return ssgCtrl::reNOT_ENABLED;	//有効条件が偽
 
 
  //オフセット用のアドレスには、[replace]等の属性を付けない
+#if !SUBJECT_STATUS
  unsigned long Address = (isOffset)?SSGC.GetAddress(this, addressStr, 0):0;
+#else
+ unsigned long Address = (isOffset) ? (unsigned long)(address = (const BYTE *)SSGC.GetAddress(this, addressStr, 0)) : 0;
+#endif
 
  vector<string> *ListFile = SSGC.GetSSGDataFile(this, fileName, ".CHN");
  if(ListFile==NULL) return ssgCtrl::reOPTION_ERROR;	//チェインファイルがない！
@@ -180,9 +247,16 @@
 	for(; VIt!=VEnd; VIt++){
 		if(VIt->empty()) continue;
 
+#if !LOCAL_MEMORY_SUPPORT
 		ThisAddress = Address+SSGC.GetAddress(this, SSGC.strD.Get(*VIt,",",0));
 
 		if(SSGC.Write(this, SHandle, &ThisAddress, AEVec)!=0)
+#else
+		string addressStr(SSGC.strD.Get(*VIt, ",", 0));
+		ThisAddress = Address + SSGC.GetAddress(this, addressStr);
+
+		if (TSSGCtrl_Write_with_CheckLocalMemory(&SSGC, this, SHandle, &ThisAddress, AEVec, addressStr) != 0)
+#endif
  			return ssgCtrl::reACCESS_ERROR; 	//エラーなら
 	}
  }
