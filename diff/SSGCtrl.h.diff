--- spal60sr\src\TSSGCtrl\SSGCtrl.original.h	Mon May 26 13:40:08 2003
+++ spal60sr\src\TSSGCtrl\SSGCtrl.h	Mon May 26 13:40:08 2003
@@ -1,6 +1,11 @@
 #ifndef SSGCtrlH
 #define SSGCtrlH
 
+#define FIX_PARSER          1
+#define FIX_LOOP_BYTE_ARRAY 1
+#define REPEAT_INDEX        1
+#define FORMAT_NAME_STRING  1
+
 #pragma warning(disable:4786)
 #pragma warning(disable:4503)
 //---------------------------------------------------------------------
@@ -34,6 +39,8 @@
 #include "SSGActionListnerBase.h"
 #include "SSGLoadSettingListnerBase.h"
 //----------------------------------------------------------------------------
+#include <stdlib.h>
+#include <vcl.h>
 #include <vector>               //	STL
 #include <map>
 #include <string>
@@ -87,7 +94,11 @@
     void SeekScriptIndex(string FileName, vector<string> *Dest, vector<TSSGScriptStruct> *ScriptVec, TSSGFindReportListnerBase *Listner);
 	void LoopSSRFile(vector< list< pair<byte, string> > > &FormatVec,
 		vector<string> &Dest, unsigned long LoopVal);
+#if !REPEAT_INDEX
     void EnumReadSSG(vector<string> &SSGFile, stack<TSSDir*> *ParentStack, TDialogAdjustmentAttribute *ADJElem);
+#else
+	void EnumReadSSG(vector<string> &SSGFile, stack<TSSDir*> *ParentStack, TDialogAdjustmentAttribute *ADJElem, DWORD RepeatIndex = 0, DWORD ParentRepeat = MAXDWORD);
+#endif
 	void EnumReadSSR(vector<string> &File, vector< list< pair<byte, string> > > *FormatVec);
 	string AddressNaming(TSSGSubject *SSGS, const string &NameStr);
 
@@ -99,10 +110,45 @@
     void Clear(void);
     void LockClear(void);
 
-    static string GetVersion(void){ return string("6.0"); }    //verèäìæä÷êî
+	static string GetVersion()	// veréÊìæä÷êî
+	{
+		static string version;
+
+		if (version.empty())
+		{
+			unsigned short verionNumber[2];
+			vector<string> key, value;
+			char           numberString[16];
+
+			verionNumber[0] = 0;
+			verionNumber[1] = 0;
+			key.push_back("FileVersion");
+			if (TFileInfo::GetVersion(Application->ExeName.c_str(), &key, &value))
+			{
+				if (!value.empty() && !value[0].empty())
+				{
+					char *p;
+
+					verionNumber[0] = (unsigned short)strtoul(value[0].c_str(), &p, 10);
+					if (*p == '.')
+					{
+						verionNumber[1] = (unsigned short)strtoul(p + 1, NULL, 10);
+					}
+				}
+			}
+			version = ultoa(verionNumber[0], numberString, 10);
+			version += ".";
+			version += ultoa(verionNumber[1], numberString, 10);
+		}
+		return version;
+	}
 
 	unsigned long ReadADJFile(TDialogAdjustmentAttribute *AElem, vector<TSSGSubject*> *SubjectVec);
+#if !REPEAT_INDEX
 	vector<string> ReadSSRFile(string &Code);
+#else
+	vector<string> ReadSSRFile(string &Code, vector<DWORD> &Indices);
+#endif
     void ReadSSG(vector<string> &SSGFile);
 
     vector<TSSGScriptStruct> GetSSGScriptVec(TSSGFindReportListnerBase *Listner);
@@ -133,14 +179,26 @@
 
 	//TSSGSubjectóòópä÷êî
     vector<string> * GetSSGDataFile(TSSGSubject *SSGS, string FName, string DefaultExt, string *CurrentDir=NULL);
+#if !FIX_PARSER
 	unsigned long Parsing(TSSGSubject *SSGS, const string &Src, unsigned long Val);
+#else
+	unsigned long Parsing(TSSGSubject *SSGS, const string &Src, ...);
+#endif
 	double ParsingDouble(TSSGSubject *SSGS, const string &Src, double Val);
+#if !SUBJECT_STATUS
 	bool IsEnabled(TSSGSubject *SSGS);
+#else
+	bool IsEnabled(TSSGSubject *SSGS, BOOLEAN evaluateAtRead = FALSE);
+#endif
 	bool IsChildRWProhibit(TSSGSubject *SSGS);
 	vector<string> * GetCautionVec(TSSGSubject *SSGS);
     unsigned long AddressAttributeFilter(TSSGSubject *SSGS, unsigned long *Address, unsigned long Mode=ssgCtrl::atALL);
 	string LoopCodeToByteCode(TSSGSubject *SSGS, string Code, unsigned long StartAddress, unsigned long OffsetAddress);
+#if !FIX_LOOP_BYTE_ARRAY
     vector<TProcessAccessElementBase*> StrToProcessAccessElementVec(TSSGSubject *SSGS, string Code);
+#else
+	vector<TProcessAccessElementBase *> StrToProcessAccessElementVec(TSSGSubject *SSGS, string Code, unsigned long Rel = 0);
+#endif
 	vector<TProcessAccessElementBase*> MakeDataCode(TSSGSubject *SSGS, string OnCode, string &OffCode, bool IsOn, unsigned long StartAddress, unsigned long OffsetAddress);
 	bool Funneling(TSSGSubject *SSGS, const string &FileName, unsigned long Val);
 	bool CheckFunnel(TSSGSubject *SSGS, unsigned long Val);
