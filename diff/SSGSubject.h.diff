--- spal60sr\src\TSSGCtrl\SSGSubject.original.h	Sun Apr  6 21:46:46 2003
+++ spal60sr\src\TSSGCtrl\SSGSubject.h	Sun Apr  6 21:46:46 2003
@@ -3,6 +3,14 @@
 
 #pragma warning(disable:4786)
 #include "SmartVector.h"
+
+#define FIX_DGRID            1
+#define REPEAT_INDEX         1
+#define IO_FEP_SUPPORT       1
+#define SUBJECT_STATUS       1
+#define SUBJECT_STRING_TABLE 1
+#define LOCAL_MEMORY_SUPPORT 1
+
 //---------------------------------------------------------------------
 //「定数一覧」
 //---------------------------------------------------------------------
@@ -50,6 +58,66 @@
 //---------------------------------------------------------------------
 //「クラス宣言」
 //---------------------------------------------------------------------
+#if SUBJECT_STRING_TABLE
+class CUniqueStringTable
+{
+public:
+	CUniqueStringTable()
+	{
+		initialize();
+	}
+	void clear()
+	{
+		vector<size_t>().swap(indices);
+		vector<string>().swap(array);
+		initialize();
+	}
+	size_t insert(const string &s)
+	{
+		const char *right = s.begin();
+		size_t rightLength = s.end() - right;
+		if (!rightLength)
+			return 0;
+		size_t size = indices.size();
+		size_t low = 1;
+		size_t high = size - 1;
+		while (low <= high)
+		{
+			size_t middle = (low + high) / 2;
+			size_t index = indices[middle];
+			const string &elem = array[index];
+			const char *left = elem.begin();
+			size_t length = elem.end() - left;
+			if (length > rightLength)
+				length = rightLength;
+			int ret = memcmp(left, right, length + 1);
+			if (!ret)
+				return index;
+			if (ret < 0)
+				low = middle + 1;
+			else
+				high = middle - 1;
+		}
+		array.push_back(s);
+		indices.insert(indices.begin() + low, size);
+		return size;
+	}
+	string &operator[](size_t index)
+	{
+		return array[index];
+	}
+private:
+	void initialize()
+	{
+		array.resize(1);
+		indices.push_back(0);
+	}
+	vector<string> array;
+	vector<size_t> indices;
+};
+extern CUniqueStringTable SubjectStringTable;
+//---------------------------------------------------------------------
+#endif
 class TSSGCtrl;
 class TSSGAttributeElement;
 class TAdjustmentAttribute;
@@ -62,11 +130,91 @@
 
 	vector<TSSGAttributeElement *> *attribute;	//適用される属性
 	byte status;	//ロックや展開済みなどのフラグ
+#if IO_FEP_SUPPORT
+public:
+	BOOLEAN isFEP;
+protected:
+#endif
+#if SUBJECT_STATUS
+public:
+	BOOLEAN evaluateAtRead;
+protected:
+#endif
+#if REPEAT_INDEX
+public:
+	DWORD propertyIndex;
+protected:
+#endif
+#if !SUBJECT_STRING_TABLE
 	string name;	//項目名（/区切り等含む全て）
 	string code;	//項目名以外のコード
 	string subjectName; //純粋な項目名
+#else
+	class CTableReferencedString
+	{
+	public:
+		CTableReferencedString() : reserved1(0), reserved2(0), index(0), reserved3(0), reserved4(0), reserved5(0)
+		{
+		}
+		operator string &() const
+		{
+			return SubjectStringTable[index];
+		}
+		CTableReferencedString &operator=(const CTableReferencedString &s)
+		{
+			index = s.index;
+			return *this;
+		}
+		CTableReferencedString &operator=(const string &s)
+		{
+			index = SubjectStringTable.insert(s);
+			return *this;
+		}
+		size_t size()
+		{
+			return SubjectStringTable[index].size();
+		}
+		bool empty()
+		{
+			return SubjectStringTable[index].empty();
+		}
+		const char *c_str()
+		{
+			return SubjectStringTable[index].c_str();
+		}
+		string operator+(const string &s)
+		{
+			return SubjectStringTable[index] + s;
+		}
+		friend string operator+(const string &left, const CTableReferencedString &right)
+		{
+			return left + SubjectStringTable[right.index];
+		}
+		bool operator!=(const char *s)
+		{
+			return SubjectStringTable[index] != s;
+		}
+	private:
+		size_t reserved1;
+		size_t reserved2;
+		size_t index;
+		size_t reserved3;
+		size_t reserved4;
+		size_t reserved5;
+	};
+	CTableReferencedString name;
+	CTableReferencedString code;
+	CTableReferencedString subjectName;
+#endif
 public:
+#if SUBJECT_STATUS
+	const BYTE *address;
+#endif
+#if !REPEAT_INDEX
     TSSGSubject(void) :isSeted(false), status(0), attribute(NULL){ type=ssgCtrl::stNONE; }
+#else
+	TSSGSubject();
+#endif
     virtual ~TSSGSubject(){}
 
 	void ReSetting(TSSGCtrl &SSGC){ isSeted=false; Setting(SSGC); }
